/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChainLinkRethFeedMock,
  ChainLinkRethFeedMockInterface,
} from "../ChainLinkRethFeedMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063feaf968c14602d575b600080fd5b60408051680100000000000000328152670ed46e09cefb800060208201526000818301819052426060830152608082015290519081900360a00190f3fea26469706673582212202fbfffa4260e108fa3be2526d76b8ecd7bcbae2b5c29952137a016ee4b77d91c64736f6c63430008130033";

type ChainLinkRethFeedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainLinkRethFeedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainLinkRethFeedMock__factory extends ContractFactory {
  constructor(...args: ChainLinkRethFeedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainLinkRethFeedMock> {
    return super.deploy(overrides || {}) as Promise<ChainLinkRethFeedMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainLinkRethFeedMock {
    return super.attach(address) as ChainLinkRethFeedMock;
  }
  connect(signer: Signer): ChainLinkRethFeedMock__factory {
    return super.connect(signer) as ChainLinkRethFeedMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainLinkRethFeedMockInterface {
    return new utils.Interface(_abi) as ChainLinkRethFeedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainLinkRethFeedMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainLinkRethFeedMock;
  }
}
