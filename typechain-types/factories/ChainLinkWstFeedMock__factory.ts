/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChainLinkWstFeedMock,
  ChainLinkWstFeedMockInterface,
} from "../ChainLinkWstFeedMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063feaf968c14602d575b600080fd5b60408051680100000000000000328152670ddbbe53e965740060208201526000818301819052426060830152608082015290519081900360a00190f3fea26469706673582212208c0267ece9b4b4a5bea407ebe0c0570cd6f699e91fd5c57dd70207892add053364736f6c63430008130033";

type ChainLinkWstFeedMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainLinkWstFeedMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainLinkWstFeedMock__factory extends ContractFactory {
  constructor(...args: ChainLinkWstFeedMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainLinkWstFeedMock> {
    return super.deploy(overrides || {}) as Promise<ChainLinkWstFeedMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainLinkWstFeedMock {
    return super.attach(address) as ChainLinkWstFeedMock;
  }
  connect(signer: Signer): ChainLinkWstFeedMock__factory {
    return super.connect(signer) as ChainLinkWstFeedMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainLinkWstFeedMockInterface {
    return new utils.Interface(_abi) as ChainLinkWstFeedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainLinkWstFeedMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainLinkWstFeedMock;
  }
}
